table inet fw {

	set private-net4 {
		type ipv4_addr
		flags constant,interval
		elements = {
			10.0.0.0/8,
			169.254.0.0/16,
			172.16.0.0/12,
			192.168.0.0/16,
		}
	}

	set private-net6 {
		type ipv6_addr
		flags constant,interval
		elements = {
			fe80::/10,
			fc00::/7,
		}
	}

	counter invalid-ct { packets 0 bytes 0 }
	counter catchall-drop { packets 0 bytes 0 }
	counter iif-other-jump { packets 0 bytes 0 }
	counter vpn-packets { packets 0 bytes 0 }
	counter private-packets { packets 0 bytes 0 }

	chain dispatch {
		type filter hook input priority filter; policy drop;
		iif "lo" accept
		iifgroup 1 jump ethernet
		iifgroup 2 jump vpn
		counter name "iif-other-jump" jump common
	}

	chain ethernet {
		ct state established,related accept
		ct state invalid counter name "invalid-ct" drop
		ip saddr @private-net4 jump private
		ip6 saddr @private-net6 jump private
		jump public
	}

	chain vpn {
		counter name "vpn-packets" accept
	}

	chain private {
		include "./private-svc.nft"
		counter name "private-packets"
		jump public
	}

	chain public {
		include "./public-svc.nft"
		jump common
	}

	chain common {
		ip protocol icmp accept comment "All ICMP types"
		ip protocol igmp accept
		ip6 nexthdr ipv6-icmp accept comment "All ICMP types"
		meta l4proto udp reject
		meta l4proto tcp reject with tcp reset
		counter name "catchall-drop" reject with icmpx type port-unreachable
	}

	chain output {
		type filter hook output priority filter; policy accept;
	}

	chain forward {
		type filter hook forward priority filter; policy drop;
		ct state established,related accept
		include "./forward-svc.nft"
	}
}

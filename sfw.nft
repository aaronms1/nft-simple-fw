#!/usr/bin/env nft -f

table inet sfw {
	include "./conf.def"

	set private-net4 {
		type ipv4_addr
		flags constant,interval
		elements = $SET_PRIVATE_NETS_V4
	}

	set private-net6 {
		type ipv6_addr
		flags constant,interval
		elements = $SET_PRIVATE_NETS_V6
	}

	set icmp-v4 {
		type icmp_type
		flags constant
		elements = $SET_DISALLOW_ICMP_V4
	}

	set icmp-v6 {
		type icmpv6_type
		flags constant
		elements = $SET_DISALLOW_ICMP_V4
	}

	# invalid packets
	counter invalid-pkts { packets 0 bytes 0 }
	# !(tcp|udp) protocol packets dropped
	counter catchall { packets 0 bytes 0 }
	# iifgroup != IIFGROUP_ETHERNET | IIFGROUP_VPN
	counter iif-other { packets 0 bytes 0 }
	# non-unicast
	counter non-unicast { packets 0 bytes 0 }
	# no reverse path
	counter no-reverse-path { packets 0 bytes 0 }
	# ipv6 type 0 routing headers
	counter type0-header { packets 0 bytes 0 }


	chain iif-dispatch {
		type filter hook input priority filter; policy drop;
		iif "lo" accept
		jump ct-state-filter
		iifgroup vmap {
			$IIFGROUP_ETHERNET : goto input-zone-dispatch,
			$IIFGROUP_VPN : goto vpn
		}
		# basic filtering of unhandled iifgroups
		counter name "iif-other" jump proto-filter
		goto reject-verdict
	}

	chain input-zone-dispatch {
		ip saddr != @private-net4 goto public
		ip6 saddr != @private-net6 goto public
		goto private
	}

	chain proto-filter {
		jump icmp-filter
		jump rt0-filter
		jump non-unicast-filter
	}

	chain allow-icmp {
		ip protocol icmp accept
		ip6 nexthdr ipv6-icmp accept
		ip protocol igmp accept
	}

	chain icmp-filter {
		# filter potentially dangerous icmp types
		ip protocol icmp icmp type @icmp-v4 goto log-drop
		ip6 nexthdr ipv6-icmp icmpv6 type @icmp-v6 goto log-drop
	}

	chain non-unicast-filter {
		# silently drop unsolicited broadcast/multicast
		meta pkttype { broadcast, multicast } counter name "non-unicast" goto log-drop
	}

	chain ct-state-filter {
		# stateful filtering and packet fastpath
		ct state established,related accept
		ct state invalid counter name "invalid-pkts" drop
	}

	chain rp-filter {
		# reverse path filter for ipv6
		type filter hook prerouting priority raw; policy drop;
		fib saddr . iif oif exists accept
		counter name "no-reverse-path"
		goto log-drop
	}

	chain rt0-filter {
		# disallow ipv6 type 0 routing headers
		rt type 0 counter name "type0-header" goto log6-reject-addr-unreachable
	}

	chain reject-verdict {
		meta l4proto udp goto logx-reject-port-unreachable
		meta l4proto tcp goto logx-reject-tcp-reset
		counter name "catchall" goto logx-reject-port-unreachable
	}

	chain log6-reject-addr-unreachable {
		jump log-reject
		reject with icmpv6 type addr-unreachable comment "icmpv6 addr-unreachable"
		# end of rule traversal
	}

	chain logx-reject-port-unreachable {
		jump log-reject
		reject comment "icmpx port-unreachable"
		# end of rule traversal
	}

	chain logx-reject-tcp-reset {
		jump log-reject
		reject with tcp reset comment "icmpx tcp reset"
		# end of rule traversal
	}

	chain log-reject {
		# if called, the subsequent rules *must* include an absolute reject verdict
		# this allows to specify a custom "reject with" when this chain returns
		limit rate 5/minute burst 5 packets log prefix "sfw (reject): " level debug flags ip options
	}

	chain log-drop {
		limit rate 5/minute burst 5 packets log prefix "sfw (drop): " level debug flags ip options
		drop comment "log dropped packet"
		# end of rule traversal
	}

	chain vpn-zone-svc     { include "./services.d/vpn/*.nft";     }
	chain private-zone-svc { include "./services.d/private/*.nft"; }
	chain public-zone-svc  { include "./services.d/public/*.nft";  }
	chain forward-zone-svc { include "./services.d/forward/*.nft"; }
	chain output-zone-svc  { include "./services.d/output/*.nft";  }

	include "./zones/vpn.nft"
	include "./zones/private.nft"
	include "./zones/public.nft"
	include "./zones/forward.nft"
	include "./zones/output.nft"
}
